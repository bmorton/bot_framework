=begin
#Microsoft Bot Connector API - v3.0

#The Bot Connector REST API allows your bot to send and receive messages to channels configured in the  [Bot Framework Developer Portal](https://dev.botframework.com). The Connector service uses industry-standard REST  and JSON over HTTPS.    Client libraries for this REST API are available. See below for a list.    Many bots will use both the Bot Connector REST API and the associated [Bot State REST API](/en-us/restapi/state). The  Bot State REST API allows a bot to store and retrieve state associated with users and conversations.    Authentication for both the Bot Connector and Bot State REST APIs is accomplished with JWT Bearer tokens, and is  described in detail in the [Connector Authentication](/en-us/restapi/authentication) document.    # Client Libraries for the Bot Connector REST API    * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)  * [Bot Builder for Node.js](/en-us/node/builder/overview/)  * Generate your own from the [Connector API Swagger file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector.Shared/Swagger/ConnectorAPI.json)    Â© 2016 Microsoft

OpenAPI spec version: v3
Contact: botframework@microsoft.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

module BotFramework
  class ConversationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # CreateConversation
    # Create a new Conversation.    POST to this method with a  * Bot being the bot creating the conversation  * IsGroup set to true if this is not a direct message (default is false)  * Array containing the members to include in the conversation    The return value is a ResourceResponse which contains a conversation id which is suitable for use  in the message payload and REST API uris.    Most channels only support the semantics of bots initiating a direct message conversation.  An example of how to do that would be:    ```  var resource = await connector.conversations.CreateConversation(new ConversationParameters(){ Bot = bot, members = new ChannelAccount[] { new ChannelAccount(\"user1\") } );  await connect.Conversations.SendToConversationAsync(resource.Id, new Activity() ... ) ;    ```
    # @param body Parameters to create the conversation from
    # @param [Hash] opts the optional parameters
    # @return [ConversationResourceResponse]
    def conversations_create_conversation(body, opts = {})
      data, _status_code, _headers = conversations_create_conversation_with_http_info(body, opts)
      data
    end

    # CreateConversation
    # Create a new Conversation.    POST to this method with a  * Bot being the bot creating the conversation  * IsGroup set to true if this is not a direct message (default is false)  * Array containing the members to include in the conversation    The return value is a ResourceResponse which contains a conversation id which is suitable for use  in the message payload and REST API uris.    Most channels only support the semantics of bots initiating a direct message conversation.  An example of how to do that would be:    &#x60;&#x60;&#x60;  var resource &#x3D; await connector.conversations.CreateConversation(new ConversationParameters(){ Bot &#x3D; bot, members &#x3D; new ChannelAccount[] { new ChannelAccount(\&quot;user1\&quot;) } );  await connect.Conversations.SendToConversationAsync(resource.Id, new Activity() ... ) ;    &#x60;&#x60;&#x60;
    # @param body Parameters to create the conversation from
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationResourceResponse, Integer, Hash)>] ConversationResourceResponse data, response status code and response headers
    def conversations_create_conversation_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.conversations_create_conversation ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.conversations_create_conversation"
      end
      # resource path
      local_var_path = '/v3/conversations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['isGroup'] = is_group
      form_params['bot'] = bot
      form_params['members'] = @api_client.build_collection_param(members, :multi)
      form_params['topicName'] = topic_name
      form_params['tenantId'] = tenant_id
      form_params['activity'] = activity
      form_params['channelData'] = channel_data

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ConversationResourceResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#conversations_create_conversation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # CreateConversation
    # Create a new Conversation.    POST to this method with a  * Bot being the bot creating the conversation  * IsGroup set to true if this is not a direct message (default is false)  * Array containing the members to include in the conversation    The return value is a ResourceResponse which contains a conversation id which is suitable for use  in the message payload and REST API uris.    Most channels only support the semantics of bots initiating a direct message conversation.  An example of how to do that would be:    ```  var resource = await connector.conversations.CreateConversation(new ConversationParameters(){ Bot = bot, members = new ChannelAccount[] { new ChannelAccount(\"user1\") } );  await connect.Conversations.SendToConversationAsync(resource.Id, new Activity() ... ) ;    ```
    # @param is_group 
    # @param bot 
    # @param members 
    # @param topic_name 
    # @param tenant_id 
    # @param activity 
    # @param channel_data 
    # @param [Hash] opts the optional parameters
    # @return [ConversationResourceResponse]
    def conversations_create_conversation(is_group, bot, members, topic_name, tenant_id, activity, channel_data, opts = {})
      data, _status_code, _headers = conversations_create_conversation_with_http_info(is_group, bot, members, topic_name, tenant_id, activity, channel_data, opts)
      data
    end

    # CreateConversation
    # Create a new Conversation.    POST to this method with a  * Bot being the bot creating the conversation  * IsGroup set to true if this is not a direct message (default is false)  * Array containing the members to include in the conversation    The return value is a ResourceResponse which contains a conversation id which is suitable for use  in the message payload and REST API uris.    Most channels only support the semantics of bots initiating a direct message conversation.  An example of how to do that would be:    &#x60;&#x60;&#x60;  var resource &#x3D; await connector.conversations.CreateConversation(new ConversationParameters(){ Bot &#x3D; bot, members &#x3D; new ChannelAccount[] { new ChannelAccount(\&quot;user1\&quot;) } );  await connect.Conversations.SendToConversationAsync(resource.Id, new Activity() ... ) ;    &#x60;&#x60;&#x60;
    # @param is_group 
    # @param bot 
    # @param members 
    # @param topic_name 
    # @param tenant_id 
    # @param activity 
    # @param channel_data 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationResourceResponse, Integer, Hash)>] ConversationResourceResponse data, response status code and response headers
    def conversations_create_conversation_with_http_info(is_group, bot, members, topic_name, tenant_id, activity, channel_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.conversations_create_conversation ...'
      end
      # verify the required parameter 'is_group' is set
      if @api_client.config.client_side_validation && is_group.nil?
        fail ArgumentError, "Missing the required parameter 'is_group' when calling ConversationsApi.conversations_create_conversation"
      end
      # verify the required parameter 'bot' is set
      if @api_client.config.client_side_validation && bot.nil?
        fail ArgumentError, "Missing the required parameter 'bot' when calling ConversationsApi.conversations_create_conversation"
      end
      # verify the required parameter 'members' is set
      if @api_client.config.client_side_validation && members.nil?
        fail ArgumentError, "Missing the required parameter 'members' when calling ConversationsApi.conversations_create_conversation"
      end
      # verify the required parameter 'topic_name' is set
      if @api_client.config.client_side_validation && topic_name.nil?
        fail ArgumentError, "Missing the required parameter 'topic_name' when calling ConversationsApi.conversations_create_conversation"
      end
      # verify the required parameter 'tenant_id' is set
      if @api_client.config.client_side_validation && tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'tenant_id' when calling ConversationsApi.conversations_create_conversation"
      end
      # verify the required parameter 'activity' is set
      if @api_client.config.client_side_validation && activity.nil?
        fail ArgumentError, "Missing the required parameter 'activity' when calling ConversationsApi.conversations_create_conversation"
      end
      # verify the required parameter 'channel_data' is set
      if @api_client.config.client_side_validation && channel_data.nil?
        fail ArgumentError, "Missing the required parameter 'channel_data' when calling ConversationsApi.conversations_create_conversation"
      end
      # resource path
      local_var_path = '/v3/conversations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['isGroup'] = is_group
      form_params['bot'] = bot
      form_params['members'] = @api_client.build_collection_param(members, :multi)
      form_params['topicName'] = topic_name
      form_params['tenantId'] = tenant_id
      form_params['activity'] = activity
      form_params['channelData'] = channel_data

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ConversationResourceResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#conversations_create_conversation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # DeleteActivity
    # Delete an existing activity.    Some channels allow you to delete an existing activity, and if successful this method will remove the specified activity.
    # @param conversation_id Conversation ID
    # @param activity_id activityId to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def conversations_delete_activity(conversation_id, activity_id, opts = {})
      conversations_delete_activity_with_http_info(conversation_id, activity_id, opts)
      nil
    end

    # DeleteActivity
    # Delete an existing activity.    Some channels allow you to delete an existing activity, and if successful this method will remove the specified activity.
    # @param conversation_id Conversation ID
    # @param activity_id activityId to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def conversations_delete_activity_with_http_info(conversation_id, activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.conversations_delete_activity ...'
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.conversations_delete_activity"
      end
      # verify the required parameter 'activity_id' is set
      if @api_client.config.client_side_validation && activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'activity_id' when calling ConversationsApi.conversations_delete_activity"
      end
      # resource path
      local_var_path = '/v3/conversations/{conversationId}/activities/{activityId}'.sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'activityId' + '}', activity_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#conversations_delete_activity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # DeleteConversationMember
    # Deletes a member from a conversation.     This REST API takes a ConversationId and a memberId (of type string) and removes that member from the conversation. If that member was the last member  of the conversation, the conversation will also be deleted.
    # @param conversation_id Conversation ID
    # @param member_id ID of the member to delete from this conversation
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def conversations_delete_conversation_member(conversation_id, member_id, opts = {})
      conversations_delete_conversation_member_with_http_info(conversation_id, member_id, opts)
      nil
    end

    # DeleteConversationMember
    # Deletes a member from a conversation.     This REST API takes a ConversationId and a memberId (of type string) and removes that member from the conversation. If that member was the last member  of the conversation, the conversation will also be deleted.
    # @param conversation_id Conversation ID
    # @param member_id ID of the member to delete from this conversation
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def conversations_delete_conversation_member_with_http_info(conversation_id, member_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.conversations_delete_conversation_member ...'
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.conversations_delete_conversation_member"
      end
      # verify the required parameter 'member_id' is set
      if @api_client.config.client_side_validation && member_id.nil?
        fail ArgumentError, "Missing the required parameter 'member_id' when calling ConversationsApi.conversations_delete_conversation_member"
      end
      # resource path
      local_var_path = '/v3/conversations/{conversationId}/members/{memberId}'.sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'memberId' + '}', member_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#conversations_delete_conversation_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # GetActivityMembers
    # Enumerate the members of an activity.     This REST API takes a ConversationId and a ActivityId, returning an array of ChannelAccount objects representing the members of the particular activity in the conversation.
    # @param conversation_id Conversation ID
    # @param activity_id Activity ID
    # @param [Hash] opts the optional parameters
    # @return [Array<ChannelAccount>]
    def conversations_get_activity_members(conversation_id, activity_id, opts = {})
      data, _status_code, _headers = conversations_get_activity_members_with_http_info(conversation_id, activity_id, opts)
      data
    end

    # GetActivityMembers
    # Enumerate the members of an activity.     This REST API takes a ConversationId and a ActivityId, returning an array of ChannelAccount objects representing the members of the particular activity in the conversation.
    # @param conversation_id Conversation ID
    # @param activity_id Activity ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ChannelAccount>, Integer, Hash)>] Array<ChannelAccount> data, response status code and response headers
    def conversations_get_activity_members_with_http_info(conversation_id, activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.conversations_get_activity_members ...'
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.conversations_get_activity_members"
      end
      # verify the required parameter 'activity_id' is set
      if @api_client.config.client_side_validation && activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'activity_id' when calling ConversationsApi.conversations_get_activity_members"
      end
      # resource path
      local_var_path = '/v3/conversations/{conversationId}/activities/{activityId}/members'.sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'activityId' + '}', activity_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<ChannelAccount>' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#conversations_get_activity_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # GetConversationMembers
    # Enumerate the members of a conversation.     This REST API takes a ConversationId and returns an array of ChannelAccount objects representing the members of the conversation.
    # @param conversation_id Conversation ID
    # @param [Hash] opts the optional parameters
    # @return [Array<ChannelAccount>]
    def conversations_get_conversation_members(conversation_id, opts = {})
      data, _status_code, _headers = conversations_get_conversation_members_with_http_info(conversation_id, opts)
      data
    end

    # GetConversationMembers
    # Enumerate the members of a conversation.     This REST API takes a ConversationId and returns an array of ChannelAccount objects representing the members of the conversation.
    # @param conversation_id Conversation ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ChannelAccount>, Integer, Hash)>] Array<ChannelAccount> data, response status code and response headers
    def conversations_get_conversation_members_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.conversations_get_conversation_members ...'
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.conversations_get_conversation_members"
      end
      # resource path
      local_var_path = '/v3/conversations/{conversationId}/members'.sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<ChannelAccount>' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#conversations_get_conversation_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # GetConversationPagedMembers
    # Enumerate the members of a conversation one page at a time.    This REST API takes a ConversationId. Optionally a pageSize and/or continuationToken can be provided. It returns a PagedMembersResult, which contains an array  of ChannelAccounts representing the members of the conversation and a continuation token that can be used to get more values.    One page of ChannelAccounts records are returned with each call. The number of records in a page may vary between channels and calls. The pageSize parameter can be used as   a suggestion. If there are no additional results the response will not contain a continuation token. If there are no members in the conversation the Members will be empty or not present in the response.    A response to a request that has a continuation token from a prior request may rarely return members from a previous request.
    # @param conversation_id Conversation ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Suggested page size
    # @option opts [String] :continuation_token Continuation Token
    # @return [PagedMembersResult]
    def conversations_get_conversation_paged_members(conversation_id, opts = {})
      data, _status_code, _headers = conversations_get_conversation_paged_members_with_http_info(conversation_id, opts)
      data
    end

    # GetConversationPagedMembers
    # Enumerate the members of a conversation one page at a time.    This REST API takes a ConversationId. Optionally a pageSize and/or continuationToken can be provided. It returns a PagedMembersResult, which contains an array  of ChannelAccounts representing the members of the conversation and a continuation token that can be used to get more values.    One page of ChannelAccounts records are returned with each call. The number of records in a page may vary between channels and calls. The pageSize parameter can be used as   a suggestion. If there are no additional results the response will not contain a continuation token. If there are no members in the conversation the Members will be empty or not present in the response.    A response to a request that has a continuation token from a prior request may rarely return members from a previous request.
    # @param conversation_id Conversation ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Suggested page size
    # @option opts [String] :continuation_token Continuation Token
    # @return [Array<(PagedMembersResult, Integer, Hash)>] PagedMembersResult data, response status code and response headers
    def conversations_get_conversation_paged_members_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.conversations_get_conversation_paged_members ...'
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.conversations_get_conversation_paged_members"
      end
      # resource path
      local_var_path = '/v3/conversations/{conversationId}/pagedmembers'.sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'continuationToken'] = opts[:'continuation_token'] if !opts[:'continuation_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'PagedMembersResult' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#conversations_get_conversation_paged_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # GetConversations
    # List the Conversations in which this bot has participated.    GET from this method with a skip token    The return value is a ConversationsResult, which contains an array of ConversationMembers and a skip token.  If the skip token is not empty, then   there are further values to be returned. Call this method again with the returned token to get more values.    Each ConversationMembers object contains the ID of the conversation and an array of ChannelAccounts that describe the members of the conversation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :continuation_token skip or continuation token
    # @return [ConversationsResult]
    def conversations_get_conversations(opts = {})
      data, _status_code, _headers = conversations_get_conversations_with_http_info(opts)
      data
    end

    # GetConversations
    # List the Conversations in which this bot has participated.    GET from this method with a skip token    The return value is a ConversationsResult, which contains an array of ConversationMembers and a skip token.  If the skip token is not empty, then   there are further values to be returned. Call this method again with the returned token to get more values.    Each ConversationMembers object contains the ID of the conversation and an array of ChannelAccounts that describe the members of the conversation.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :continuation_token skip or continuation token
    # @return [Array<(ConversationsResult, Integer, Hash)>] ConversationsResult data, response status code and response headers
    def conversations_get_conversations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.conversations_get_conversations ...'
      end
      # resource path
      local_var_path = '/v3/conversations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'continuationToken'] = opts[:'continuation_token'] if !opts[:'continuation_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ConversationsResult' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#conversations_get_conversations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # ReplyToActivity
    # This method allows you to reply to an activity.    This is slightly different from SendToConversation().  * SendToConversation(conversationId) - will append the activity to the end of the conversation according to the timestamp or semantics of the channel.  * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply to another activity, if the channel supports it. If the channel does not support nested replies, ReplyToActivity falls back to SendToConversation.    Use ReplyToActivity when replying to a specific activity in the conversation.    Use SendToConversation in all other cases.
    # @param body Activity to send
    # @param conversation_id Conversation ID
    # @param activity_id activityId the reply is to (OPTIONAL)
    # @param [Hash] opts the optional parameters
    # @return [ResourceResponse]
    def conversations_reply_to_activity(body, conversation_id, activity_id, opts = {})
      data, _status_code, _headers = conversations_reply_to_activity_with_http_info(body, conversation_id, activity_id, opts)
      data
    end

    # ReplyToActivity
    # This method allows you to reply to an activity.    This is slightly different from SendToConversation().  * SendToConversation(conversationId) - will append the activity to the end of the conversation according to the timestamp or semantics of the channel.  * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply to another activity, if the channel supports it. If the channel does not support nested replies, ReplyToActivity falls back to SendToConversation.    Use ReplyToActivity when replying to a specific activity in the conversation.    Use SendToConversation in all other cases.
    # @param body Activity to send
    # @param conversation_id Conversation ID
    # @param activity_id activityId the reply is to (OPTIONAL)
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceResponse, Integer, Hash)>] ResourceResponse data, response status code and response headers
    def conversations_reply_to_activity_with_http_info(body, conversation_id, activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.conversations_reply_to_activity ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'activity_id' is set
      if @api_client.config.client_side_validation && activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'activity_id' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # resource path
      local_var_path = '/v3/conversations/{conversationId}/activities/{activityId}'.sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'activityId' + '}', activity_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['type'] = type
      form_params['id'] = id
      form_params['timestamp'] = timestamp
      form_params['localTimestamp'] = local_timestamp
      form_params['localTimezone'] = local_timezone
      form_params['callerId'] = caller_id
      form_params['serviceUrl'] = service_url
      form_params['channelId'] = channel_id
      form_params['from'] = from
      form_params['conversation'] = conversation
      form_params['recipient'] = recipient
      form_params['textFormat'] = text_format
      form_params['attachmentLayout'] = attachment_layout
      form_params['membersAdded'] = @api_client.build_collection_param(members_added, :multi)
      form_params['membersRemoved'] = @api_client.build_collection_param(members_removed, :multi)
      form_params['reactionsAdded'] = @api_client.build_collection_param(reactions_added, :multi)
      form_params['reactionsRemoved'] = @api_client.build_collection_param(reactions_removed, :multi)
      form_params['topicName'] = topic_name
      form_params['historyDisclosed'] = history_disclosed
      form_params['locale'] = locale
      form_params['text'] = text
      form_params['speak'] = speak
      form_params['inputHint'] = input_hint
      form_params['summary'] = summary
      form_params['suggestedActions'] = suggested_actions
      form_params['attachments'] = @api_client.build_collection_param(attachments, :multi)
      form_params['entities'] = @api_client.build_collection_param(entities, :multi)
      form_params['channelData'] = channel_data
      form_params['action'] = action
      form_params['replyToId'] = reply_to_id
      form_params['label'] = label
      form_params['valueType'] = value_type
      form_params['value'] = value
      form_params['name'] = name
      form_params['relatesTo'] = relates_to
      form_params['code'] = code
      form_params['expiration'] = expiration
      form_params['importance'] = importance
      form_params['deliveryMode'] = delivery_mode
      form_params['listenFor'] = @api_client.build_collection_param(listen_for, :multi)
      form_params['textHighlights'] = @api_client.build_collection_param(text_highlights, :multi)
      form_params['semanticAction'] = semantic_action

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ResourceResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#conversations_reply_to_activity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # ReplyToActivity
    # This method allows you to reply to an activity.    This is slightly different from SendToConversation().  * SendToConversation(conversationId) - will append the activity to the end of the conversation according to the timestamp or semantics of the channel.  * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply to another activity, if the channel supports it. If the channel does not support nested replies, ReplyToActivity falls back to SendToConversation.    Use ReplyToActivity when replying to a specific activity in the conversation.    Use SendToConversation in all other cases.
    # @param type 
    # @param id 
    # @param timestamp 
    # @param local_timestamp 
    # @param local_timezone 
    # @param caller_id 
    # @param service_url 
    # @param channel_id 
    # @param from 
    # @param conversation 
    # @param recipient 
    # @param text_format 
    # @param attachment_layout 
    # @param members_added 
    # @param members_removed 
    # @param reactions_added 
    # @param reactions_removed 
    # @param topic_name 
    # @param history_disclosed 
    # @param locale 
    # @param text 
    # @param speak 
    # @param input_hint 
    # @param summary 
    # @param suggested_actions 
    # @param attachments 
    # @param entities 
    # @param channel_data 
    # @param action 
    # @param reply_to_id 
    # @param label 
    # @param value_type 
    # @param value 
    # @param name 
    # @param relates_to 
    # @param code 
    # @param expiration 
    # @param importance 
    # @param delivery_mode 
    # @param listen_for 
    # @param text_highlights 
    # @param semantic_action 
    # @param conversation_id Conversation ID
    # @param activity_id activityId the reply is to (OPTIONAL)
    # @param [Hash] opts the optional parameters
    # @return [ResourceResponse]
    def conversations_reply_to_activity(type, id, timestamp, local_timestamp, local_timezone, caller_id, service_url, channel_id, from, conversation, recipient, text_format, attachment_layout, members_added, members_removed, reactions_added, reactions_removed, topic_name, history_disclosed, locale, text, speak, input_hint, summary, suggested_actions, attachments, entities, channel_data, action, reply_to_id, label, value_type, value, name, relates_to, code, expiration, importance, delivery_mode, listen_for, text_highlights, semantic_action, conversation_id, activity_id, opts = {})
      data, _status_code, _headers = conversations_reply_to_activity_with_http_info(type, id, timestamp, local_timestamp, local_timezone, caller_id, service_url, channel_id, from, conversation, recipient, text_format, attachment_layout, members_added, members_removed, reactions_added, reactions_removed, topic_name, history_disclosed, locale, text, speak, input_hint, summary, suggested_actions, attachments, entities, channel_data, action, reply_to_id, label, value_type, value, name, relates_to, code, expiration, importance, delivery_mode, listen_for, text_highlights, semantic_action, conversation_id, activity_id, opts)
      data
    end

    # ReplyToActivity
    # This method allows you to reply to an activity.    This is slightly different from SendToConversation().  * SendToConversation(conversationId) - will append the activity to the end of the conversation according to the timestamp or semantics of the channel.  * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply to another activity, if the channel supports it. If the channel does not support nested replies, ReplyToActivity falls back to SendToConversation.    Use ReplyToActivity when replying to a specific activity in the conversation.    Use SendToConversation in all other cases.
    # @param type 
    # @param id 
    # @param timestamp 
    # @param local_timestamp 
    # @param local_timezone 
    # @param caller_id 
    # @param service_url 
    # @param channel_id 
    # @param from 
    # @param conversation 
    # @param recipient 
    # @param text_format 
    # @param attachment_layout 
    # @param members_added 
    # @param members_removed 
    # @param reactions_added 
    # @param reactions_removed 
    # @param topic_name 
    # @param history_disclosed 
    # @param locale 
    # @param text 
    # @param speak 
    # @param input_hint 
    # @param summary 
    # @param suggested_actions 
    # @param attachments 
    # @param entities 
    # @param channel_data 
    # @param action 
    # @param reply_to_id 
    # @param label 
    # @param value_type 
    # @param value 
    # @param name 
    # @param relates_to 
    # @param code 
    # @param expiration 
    # @param importance 
    # @param delivery_mode 
    # @param listen_for 
    # @param text_highlights 
    # @param semantic_action 
    # @param conversation_id Conversation ID
    # @param activity_id activityId the reply is to (OPTIONAL)
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceResponse, Integer, Hash)>] ResourceResponse data, response status code and response headers
    def conversations_reply_to_activity_with_http_info(type, id, timestamp, local_timestamp, local_timezone, caller_id, service_url, channel_id, from, conversation, recipient, text_format, attachment_layout, members_added, members_removed, reactions_added, reactions_removed, topic_name, history_disclosed, locale, text, speak, input_hint, summary, suggested_actions, attachments, entities, channel_data, action, reply_to_id, label, value_type, value, name, relates_to, code, expiration, importance, delivery_mode, listen_for, text_highlights, semantic_action, conversation_id, activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.conversations_reply_to_activity ...'
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'timestamp' is set
      if @api_client.config.client_side_validation && timestamp.nil?
        fail ArgumentError, "Missing the required parameter 'timestamp' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'local_timestamp' is set
      if @api_client.config.client_side_validation && local_timestamp.nil?
        fail ArgumentError, "Missing the required parameter 'local_timestamp' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'local_timezone' is set
      if @api_client.config.client_side_validation && local_timezone.nil?
        fail ArgumentError, "Missing the required parameter 'local_timezone' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'caller_id' is set
      if @api_client.config.client_side_validation && caller_id.nil?
        fail ArgumentError, "Missing the required parameter 'caller_id' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'service_url' is set
      if @api_client.config.client_side_validation && service_url.nil?
        fail ArgumentError, "Missing the required parameter 'service_url' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'conversation' is set
      if @api_client.config.client_side_validation && conversation.nil?
        fail ArgumentError, "Missing the required parameter 'conversation' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'recipient' is set
      if @api_client.config.client_side_validation && recipient.nil?
        fail ArgumentError, "Missing the required parameter 'recipient' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'text_format' is set
      if @api_client.config.client_side_validation && text_format.nil?
        fail ArgumentError, "Missing the required parameter 'text_format' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'attachment_layout' is set
      if @api_client.config.client_side_validation && attachment_layout.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_layout' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'members_added' is set
      if @api_client.config.client_side_validation && members_added.nil?
        fail ArgumentError, "Missing the required parameter 'members_added' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'members_removed' is set
      if @api_client.config.client_side_validation && members_removed.nil?
        fail ArgumentError, "Missing the required parameter 'members_removed' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'reactions_added' is set
      if @api_client.config.client_side_validation && reactions_added.nil?
        fail ArgumentError, "Missing the required parameter 'reactions_added' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'reactions_removed' is set
      if @api_client.config.client_side_validation && reactions_removed.nil?
        fail ArgumentError, "Missing the required parameter 'reactions_removed' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'topic_name' is set
      if @api_client.config.client_side_validation && topic_name.nil?
        fail ArgumentError, "Missing the required parameter 'topic_name' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'history_disclosed' is set
      if @api_client.config.client_side_validation && history_disclosed.nil?
        fail ArgumentError, "Missing the required parameter 'history_disclosed' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'locale' is set
      if @api_client.config.client_side_validation && locale.nil?
        fail ArgumentError, "Missing the required parameter 'locale' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'speak' is set
      if @api_client.config.client_side_validation && speak.nil?
        fail ArgumentError, "Missing the required parameter 'speak' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'input_hint' is set
      if @api_client.config.client_side_validation && input_hint.nil?
        fail ArgumentError, "Missing the required parameter 'input_hint' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'summary' is set
      if @api_client.config.client_side_validation && summary.nil?
        fail ArgumentError, "Missing the required parameter 'summary' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'suggested_actions' is set
      if @api_client.config.client_side_validation && suggested_actions.nil?
        fail ArgumentError, "Missing the required parameter 'suggested_actions' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'attachments' is set
      if @api_client.config.client_side_validation && attachments.nil?
        fail ArgumentError, "Missing the required parameter 'attachments' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'entities' is set
      if @api_client.config.client_side_validation && entities.nil?
        fail ArgumentError, "Missing the required parameter 'entities' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'channel_data' is set
      if @api_client.config.client_side_validation && channel_data.nil?
        fail ArgumentError, "Missing the required parameter 'channel_data' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'reply_to_id' is set
      if @api_client.config.client_side_validation && reply_to_id.nil?
        fail ArgumentError, "Missing the required parameter 'reply_to_id' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'label' is set
      if @api_client.config.client_side_validation && label.nil?
        fail ArgumentError, "Missing the required parameter 'label' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'value_type' is set
      if @api_client.config.client_side_validation && value_type.nil?
        fail ArgumentError, "Missing the required parameter 'value_type' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'relates_to' is set
      if @api_client.config.client_side_validation && relates_to.nil?
        fail ArgumentError, "Missing the required parameter 'relates_to' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'expiration' is set
      if @api_client.config.client_side_validation && expiration.nil?
        fail ArgumentError, "Missing the required parameter 'expiration' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'importance' is set
      if @api_client.config.client_side_validation && importance.nil?
        fail ArgumentError, "Missing the required parameter 'importance' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'delivery_mode' is set
      if @api_client.config.client_side_validation && delivery_mode.nil?
        fail ArgumentError, "Missing the required parameter 'delivery_mode' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'listen_for' is set
      if @api_client.config.client_side_validation && listen_for.nil?
        fail ArgumentError, "Missing the required parameter 'listen_for' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'text_highlights' is set
      if @api_client.config.client_side_validation && text_highlights.nil?
        fail ArgumentError, "Missing the required parameter 'text_highlights' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'semantic_action' is set
      if @api_client.config.client_side_validation && semantic_action.nil?
        fail ArgumentError, "Missing the required parameter 'semantic_action' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # verify the required parameter 'activity_id' is set
      if @api_client.config.client_side_validation && activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'activity_id' when calling ConversationsApi.conversations_reply_to_activity"
      end
      # resource path
      local_var_path = '/v3/conversations/{conversationId}/activities/{activityId}'.sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'activityId' + '}', activity_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['type'] = type
      form_params['id'] = id
      form_params['timestamp'] = timestamp
      form_params['localTimestamp'] = local_timestamp
      form_params['localTimezone'] = local_timezone
      form_params['callerId'] = caller_id
      form_params['serviceUrl'] = service_url
      form_params['channelId'] = channel_id
      form_params['from'] = from
      form_params['conversation'] = conversation
      form_params['recipient'] = recipient
      form_params['textFormat'] = text_format
      form_params['attachmentLayout'] = attachment_layout
      form_params['membersAdded'] = @api_client.build_collection_param(members_added, :multi)
      form_params['membersRemoved'] = @api_client.build_collection_param(members_removed, :multi)
      form_params['reactionsAdded'] = @api_client.build_collection_param(reactions_added, :multi)
      form_params['reactionsRemoved'] = @api_client.build_collection_param(reactions_removed, :multi)
      form_params['topicName'] = topic_name
      form_params['historyDisclosed'] = history_disclosed
      form_params['locale'] = locale
      form_params['text'] = text
      form_params['speak'] = speak
      form_params['inputHint'] = input_hint
      form_params['summary'] = summary
      form_params['suggestedActions'] = suggested_actions
      form_params['attachments'] = @api_client.build_collection_param(attachments, :multi)
      form_params['entities'] = @api_client.build_collection_param(entities, :multi)
      form_params['channelData'] = channel_data
      form_params['action'] = action
      form_params['replyToId'] = reply_to_id
      form_params['label'] = label
      form_params['valueType'] = value_type
      form_params['value'] = value
      form_params['name'] = name
      form_params['relatesTo'] = relates_to
      form_params['code'] = code
      form_params['expiration'] = expiration
      form_params['importance'] = importance
      form_params['deliveryMode'] = delivery_mode
      form_params['listenFor'] = @api_client.build_collection_param(listen_for, :multi)
      form_params['textHighlights'] = @api_client.build_collection_param(text_highlights, :multi)
      form_params['semanticAction'] = semantic_action

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ResourceResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#conversations_reply_to_activity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # SendConversationHistory
    # This method allows you to upload the historic activities to the conversation.    Sender must ensure that the historic activities have unique ids and appropriate timestamps. The ids are used by the client to deal with duplicate activities and the timestamps are used by the client to render the activities in the right order.
    # @param body Historic activities
    # @param conversation_id Conversation ID
    # @param [Hash] opts the optional parameters
    # @return [ResourceResponse]
    def conversations_send_conversation_history(body, conversation_id, opts = {})
      data, _status_code, _headers = conversations_send_conversation_history_with_http_info(body, conversation_id, opts)
      data
    end

    # SendConversationHistory
    # This method allows you to upload the historic activities to the conversation.    Sender must ensure that the historic activities have unique ids and appropriate timestamps. The ids are used by the client to deal with duplicate activities and the timestamps are used by the client to render the activities in the right order.
    # @param body Historic activities
    # @param conversation_id Conversation ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceResponse, Integer, Hash)>] ResourceResponse data, response status code and response headers
    def conversations_send_conversation_history_with_http_info(body, conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.conversations_send_conversation_history ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.conversations_send_conversation_history"
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.conversations_send_conversation_history"
      end
      # resource path
      local_var_path = '/v3/conversations/{conversationId}/activities/history'.sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['activities'] = @api_client.build_collection_param(activities, :multi)

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ResourceResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#conversations_send_conversation_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # SendConversationHistory
    # This method allows you to upload the historic activities to the conversation.    Sender must ensure that the historic activities have unique ids and appropriate timestamps. The ids are used by the client to deal with duplicate activities and the timestamps are used by the client to render the activities in the right order.
    # @param activities 
    # @param conversation_id Conversation ID
    # @param [Hash] opts the optional parameters
    # @return [ResourceResponse]
    def conversations_send_conversation_history(activities, conversation_id, opts = {})
      data, _status_code, _headers = conversations_send_conversation_history_with_http_info(activities, conversation_id, opts)
      data
    end

    # SendConversationHistory
    # This method allows you to upload the historic activities to the conversation.    Sender must ensure that the historic activities have unique ids and appropriate timestamps. The ids are used by the client to deal with duplicate activities and the timestamps are used by the client to render the activities in the right order.
    # @param activities 
    # @param conversation_id Conversation ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceResponse, Integer, Hash)>] ResourceResponse data, response status code and response headers
    def conversations_send_conversation_history_with_http_info(activities, conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.conversations_send_conversation_history ...'
      end
      # verify the required parameter 'activities' is set
      if @api_client.config.client_side_validation && activities.nil?
        fail ArgumentError, "Missing the required parameter 'activities' when calling ConversationsApi.conversations_send_conversation_history"
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.conversations_send_conversation_history"
      end
      # resource path
      local_var_path = '/v3/conversations/{conversationId}/activities/history'.sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['activities'] = @api_client.build_collection_param(activities, :multi)

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ResourceResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#conversations_send_conversation_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # SendToConversation
    # This method allows you to send an activity to the end of a conversation.    This is slightly different from ReplyToActivity().  * SendToConversation(conversationId) - will append the activity to the end of the conversation according to the timestamp or semantics of the channel.  * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply to another activity, if the channel supports it. If the channel does not support nested replies, ReplyToActivity falls back to SendToConversation.    Use ReplyToActivity when replying to a specific activity in the conversation.    Use SendToConversation in all other cases.
    # @param body Activity to send
    # @param conversation_id Conversation ID
    # @param [Hash] opts the optional parameters
    # @return [ResourceResponse]
    def conversations_send_to_conversation(body, conversation_id, opts = {})
      data, _status_code, _headers = conversations_send_to_conversation_with_http_info(body, conversation_id, opts)
      data
    end

    # SendToConversation
    # This method allows you to send an activity to the end of a conversation.    This is slightly different from ReplyToActivity().  * SendToConversation(conversationId) - will append the activity to the end of the conversation according to the timestamp or semantics of the channel.  * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply to another activity, if the channel supports it. If the channel does not support nested replies, ReplyToActivity falls back to SendToConversation.    Use ReplyToActivity when replying to a specific activity in the conversation.    Use SendToConversation in all other cases.
    # @param body Activity to send
    # @param conversation_id Conversation ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceResponse, Integer, Hash)>] ResourceResponse data, response status code and response headers
    def conversations_send_to_conversation_with_http_info(body, conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.conversations_send_to_conversation ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # resource path
      local_var_path = '/v3/conversations/{conversationId}/activities'.sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['type'] = type
      form_params['id'] = id
      form_params['timestamp'] = timestamp
      form_params['localTimestamp'] = local_timestamp
      form_params['localTimezone'] = local_timezone
      form_params['callerId'] = caller_id
      form_params['serviceUrl'] = service_url
      form_params['channelId'] = channel_id
      form_params['from'] = from
      form_params['conversation'] = conversation
      form_params['recipient'] = recipient
      form_params['textFormat'] = text_format
      form_params['attachmentLayout'] = attachment_layout
      form_params['membersAdded'] = @api_client.build_collection_param(members_added, :multi)
      form_params['membersRemoved'] = @api_client.build_collection_param(members_removed, :multi)
      form_params['reactionsAdded'] = @api_client.build_collection_param(reactions_added, :multi)
      form_params['reactionsRemoved'] = @api_client.build_collection_param(reactions_removed, :multi)
      form_params['topicName'] = topic_name
      form_params['historyDisclosed'] = history_disclosed
      form_params['locale'] = locale
      form_params['text'] = text
      form_params['speak'] = speak
      form_params['inputHint'] = input_hint
      form_params['summary'] = summary
      form_params['suggestedActions'] = suggested_actions
      form_params['attachments'] = @api_client.build_collection_param(attachments, :multi)
      form_params['entities'] = @api_client.build_collection_param(entities, :multi)
      form_params['channelData'] = channel_data
      form_params['action'] = action
      form_params['replyToId'] = reply_to_id
      form_params['label'] = label
      form_params['valueType'] = value_type
      form_params['value'] = value
      form_params['name'] = name
      form_params['relatesTo'] = relates_to
      form_params['code'] = code
      form_params['expiration'] = expiration
      form_params['importance'] = importance
      form_params['deliveryMode'] = delivery_mode
      form_params['listenFor'] = @api_client.build_collection_param(listen_for, :multi)
      form_params['textHighlights'] = @api_client.build_collection_param(text_highlights, :multi)
      form_params['semanticAction'] = semantic_action

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ResourceResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#conversations_send_to_conversation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # SendToConversation
    # This method allows you to send an activity to the end of a conversation.    This is slightly different from ReplyToActivity().  * SendToConversation(conversationId) - will append the activity to the end of the conversation according to the timestamp or semantics of the channel.  * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply to another activity, if the channel supports it. If the channel does not support nested replies, ReplyToActivity falls back to SendToConversation.    Use ReplyToActivity when replying to a specific activity in the conversation.    Use SendToConversation in all other cases.
    # @param type 
    # @param id 
    # @param timestamp 
    # @param local_timestamp 
    # @param local_timezone 
    # @param caller_id 
    # @param service_url 
    # @param channel_id 
    # @param from 
    # @param conversation 
    # @param recipient 
    # @param text_format 
    # @param attachment_layout 
    # @param members_added 
    # @param members_removed 
    # @param reactions_added 
    # @param reactions_removed 
    # @param topic_name 
    # @param history_disclosed 
    # @param locale 
    # @param text 
    # @param speak 
    # @param input_hint 
    # @param summary 
    # @param suggested_actions 
    # @param attachments 
    # @param entities 
    # @param channel_data 
    # @param action 
    # @param reply_to_id 
    # @param label 
    # @param value_type 
    # @param value 
    # @param name 
    # @param relates_to 
    # @param code 
    # @param expiration 
    # @param importance 
    # @param delivery_mode 
    # @param listen_for 
    # @param text_highlights 
    # @param semantic_action 
    # @param conversation_id Conversation ID
    # @param [Hash] opts the optional parameters
    # @return [ResourceResponse]
    def conversations_send_to_conversation(type, id, timestamp, local_timestamp, local_timezone, caller_id, service_url, channel_id, from, conversation, recipient, text_format, attachment_layout, members_added, members_removed, reactions_added, reactions_removed, topic_name, history_disclosed, locale, text, speak, input_hint, summary, suggested_actions, attachments, entities, channel_data, action, reply_to_id, label, value_type, value, name, relates_to, code, expiration, importance, delivery_mode, listen_for, text_highlights, semantic_action, conversation_id, opts = {})
      data, _status_code, _headers = conversations_send_to_conversation_with_http_info(type, id, timestamp, local_timestamp, local_timezone, caller_id, service_url, channel_id, from, conversation, recipient, text_format, attachment_layout, members_added, members_removed, reactions_added, reactions_removed, topic_name, history_disclosed, locale, text, speak, input_hint, summary, suggested_actions, attachments, entities, channel_data, action, reply_to_id, label, value_type, value, name, relates_to, code, expiration, importance, delivery_mode, listen_for, text_highlights, semantic_action, conversation_id, opts)
      data
    end

    # SendToConversation
    # This method allows you to send an activity to the end of a conversation.    This is slightly different from ReplyToActivity().  * SendToConversation(conversationId) - will append the activity to the end of the conversation according to the timestamp or semantics of the channel.  * ReplyToActivity(conversationId,ActivityId) - adds the activity as a reply to another activity, if the channel supports it. If the channel does not support nested replies, ReplyToActivity falls back to SendToConversation.    Use ReplyToActivity when replying to a specific activity in the conversation.    Use SendToConversation in all other cases.
    # @param type 
    # @param id 
    # @param timestamp 
    # @param local_timestamp 
    # @param local_timezone 
    # @param caller_id 
    # @param service_url 
    # @param channel_id 
    # @param from 
    # @param conversation 
    # @param recipient 
    # @param text_format 
    # @param attachment_layout 
    # @param members_added 
    # @param members_removed 
    # @param reactions_added 
    # @param reactions_removed 
    # @param topic_name 
    # @param history_disclosed 
    # @param locale 
    # @param text 
    # @param speak 
    # @param input_hint 
    # @param summary 
    # @param suggested_actions 
    # @param attachments 
    # @param entities 
    # @param channel_data 
    # @param action 
    # @param reply_to_id 
    # @param label 
    # @param value_type 
    # @param value 
    # @param name 
    # @param relates_to 
    # @param code 
    # @param expiration 
    # @param importance 
    # @param delivery_mode 
    # @param listen_for 
    # @param text_highlights 
    # @param semantic_action 
    # @param conversation_id Conversation ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceResponse, Integer, Hash)>] ResourceResponse data, response status code and response headers
    def conversations_send_to_conversation_with_http_info(type, id, timestamp, local_timestamp, local_timezone, caller_id, service_url, channel_id, from, conversation, recipient, text_format, attachment_layout, members_added, members_removed, reactions_added, reactions_removed, topic_name, history_disclosed, locale, text, speak, input_hint, summary, suggested_actions, attachments, entities, channel_data, action, reply_to_id, label, value_type, value, name, relates_to, code, expiration, importance, delivery_mode, listen_for, text_highlights, semantic_action, conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.conversations_send_to_conversation ...'
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'timestamp' is set
      if @api_client.config.client_side_validation && timestamp.nil?
        fail ArgumentError, "Missing the required parameter 'timestamp' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'local_timestamp' is set
      if @api_client.config.client_side_validation && local_timestamp.nil?
        fail ArgumentError, "Missing the required parameter 'local_timestamp' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'local_timezone' is set
      if @api_client.config.client_side_validation && local_timezone.nil?
        fail ArgumentError, "Missing the required parameter 'local_timezone' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'caller_id' is set
      if @api_client.config.client_side_validation && caller_id.nil?
        fail ArgumentError, "Missing the required parameter 'caller_id' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'service_url' is set
      if @api_client.config.client_side_validation && service_url.nil?
        fail ArgumentError, "Missing the required parameter 'service_url' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'conversation' is set
      if @api_client.config.client_side_validation && conversation.nil?
        fail ArgumentError, "Missing the required parameter 'conversation' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'recipient' is set
      if @api_client.config.client_side_validation && recipient.nil?
        fail ArgumentError, "Missing the required parameter 'recipient' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'text_format' is set
      if @api_client.config.client_side_validation && text_format.nil?
        fail ArgumentError, "Missing the required parameter 'text_format' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'attachment_layout' is set
      if @api_client.config.client_side_validation && attachment_layout.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_layout' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'members_added' is set
      if @api_client.config.client_side_validation && members_added.nil?
        fail ArgumentError, "Missing the required parameter 'members_added' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'members_removed' is set
      if @api_client.config.client_side_validation && members_removed.nil?
        fail ArgumentError, "Missing the required parameter 'members_removed' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'reactions_added' is set
      if @api_client.config.client_side_validation && reactions_added.nil?
        fail ArgumentError, "Missing the required parameter 'reactions_added' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'reactions_removed' is set
      if @api_client.config.client_side_validation && reactions_removed.nil?
        fail ArgumentError, "Missing the required parameter 'reactions_removed' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'topic_name' is set
      if @api_client.config.client_side_validation && topic_name.nil?
        fail ArgumentError, "Missing the required parameter 'topic_name' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'history_disclosed' is set
      if @api_client.config.client_side_validation && history_disclosed.nil?
        fail ArgumentError, "Missing the required parameter 'history_disclosed' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'locale' is set
      if @api_client.config.client_side_validation && locale.nil?
        fail ArgumentError, "Missing the required parameter 'locale' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'speak' is set
      if @api_client.config.client_side_validation && speak.nil?
        fail ArgumentError, "Missing the required parameter 'speak' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'input_hint' is set
      if @api_client.config.client_side_validation && input_hint.nil?
        fail ArgumentError, "Missing the required parameter 'input_hint' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'summary' is set
      if @api_client.config.client_side_validation && summary.nil?
        fail ArgumentError, "Missing the required parameter 'summary' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'suggested_actions' is set
      if @api_client.config.client_side_validation && suggested_actions.nil?
        fail ArgumentError, "Missing the required parameter 'suggested_actions' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'attachments' is set
      if @api_client.config.client_side_validation && attachments.nil?
        fail ArgumentError, "Missing the required parameter 'attachments' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'entities' is set
      if @api_client.config.client_side_validation && entities.nil?
        fail ArgumentError, "Missing the required parameter 'entities' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'channel_data' is set
      if @api_client.config.client_side_validation && channel_data.nil?
        fail ArgumentError, "Missing the required parameter 'channel_data' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'reply_to_id' is set
      if @api_client.config.client_side_validation && reply_to_id.nil?
        fail ArgumentError, "Missing the required parameter 'reply_to_id' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'label' is set
      if @api_client.config.client_side_validation && label.nil?
        fail ArgumentError, "Missing the required parameter 'label' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'value_type' is set
      if @api_client.config.client_side_validation && value_type.nil?
        fail ArgumentError, "Missing the required parameter 'value_type' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'relates_to' is set
      if @api_client.config.client_side_validation && relates_to.nil?
        fail ArgumentError, "Missing the required parameter 'relates_to' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'expiration' is set
      if @api_client.config.client_side_validation && expiration.nil?
        fail ArgumentError, "Missing the required parameter 'expiration' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'importance' is set
      if @api_client.config.client_side_validation && importance.nil?
        fail ArgumentError, "Missing the required parameter 'importance' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'delivery_mode' is set
      if @api_client.config.client_side_validation && delivery_mode.nil?
        fail ArgumentError, "Missing the required parameter 'delivery_mode' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'listen_for' is set
      if @api_client.config.client_side_validation && listen_for.nil?
        fail ArgumentError, "Missing the required parameter 'listen_for' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'text_highlights' is set
      if @api_client.config.client_side_validation && text_highlights.nil?
        fail ArgumentError, "Missing the required parameter 'text_highlights' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'semantic_action' is set
      if @api_client.config.client_side_validation && semantic_action.nil?
        fail ArgumentError, "Missing the required parameter 'semantic_action' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.conversations_send_to_conversation"
      end
      # resource path
      local_var_path = '/v3/conversations/{conversationId}/activities'.sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['type'] = type
      form_params['id'] = id
      form_params['timestamp'] = timestamp
      form_params['localTimestamp'] = local_timestamp
      form_params['localTimezone'] = local_timezone
      form_params['callerId'] = caller_id
      form_params['serviceUrl'] = service_url
      form_params['channelId'] = channel_id
      form_params['from'] = from
      form_params['conversation'] = conversation
      form_params['recipient'] = recipient
      form_params['textFormat'] = text_format
      form_params['attachmentLayout'] = attachment_layout
      form_params['membersAdded'] = @api_client.build_collection_param(members_added, :multi)
      form_params['membersRemoved'] = @api_client.build_collection_param(members_removed, :multi)
      form_params['reactionsAdded'] = @api_client.build_collection_param(reactions_added, :multi)
      form_params['reactionsRemoved'] = @api_client.build_collection_param(reactions_removed, :multi)
      form_params['topicName'] = topic_name
      form_params['historyDisclosed'] = history_disclosed
      form_params['locale'] = locale
      form_params['text'] = text
      form_params['speak'] = speak
      form_params['inputHint'] = input_hint
      form_params['summary'] = summary
      form_params['suggestedActions'] = suggested_actions
      form_params['attachments'] = @api_client.build_collection_param(attachments, :multi)
      form_params['entities'] = @api_client.build_collection_param(entities, :multi)
      form_params['channelData'] = channel_data
      form_params['action'] = action
      form_params['replyToId'] = reply_to_id
      form_params['label'] = label
      form_params['valueType'] = value_type
      form_params['value'] = value
      form_params['name'] = name
      form_params['relatesTo'] = relates_to
      form_params['code'] = code
      form_params['expiration'] = expiration
      form_params['importance'] = importance
      form_params['deliveryMode'] = delivery_mode
      form_params['listenFor'] = @api_client.build_collection_param(listen_for, :multi)
      form_params['textHighlights'] = @api_client.build_collection_param(text_highlights, :multi)
      form_params['semanticAction'] = semantic_action

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ResourceResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#conversations_send_to_conversation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # UpdateActivity
    # Edit an existing activity.    Some channels allow you to edit an existing activity to reflect the new state of a bot conversation.    For example, you can remove buttons after someone has clicked \"Approve\" button.
    # @param body replacement Activity
    # @param conversation_id Conversation ID
    # @param activity_id activityId to update
    # @param [Hash] opts the optional parameters
    # @return [ResourceResponse]
    def conversations_update_activity(body, conversation_id, activity_id, opts = {})
      data, _status_code, _headers = conversations_update_activity_with_http_info(body, conversation_id, activity_id, opts)
      data
    end

    # UpdateActivity
    # Edit an existing activity.    Some channels allow you to edit an existing activity to reflect the new state of a bot conversation.    For example, you can remove buttons after someone has clicked \&quot;Approve\&quot; button.
    # @param body replacement Activity
    # @param conversation_id Conversation ID
    # @param activity_id activityId to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceResponse, Integer, Hash)>] ResourceResponse data, response status code and response headers
    def conversations_update_activity_with_http_info(body, conversation_id, activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.conversations_update_activity ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'activity_id' is set
      if @api_client.config.client_side_validation && activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'activity_id' when calling ConversationsApi.conversations_update_activity"
      end
      # resource path
      local_var_path = '/v3/conversations/{conversationId}/activities/{activityId}'.sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'activityId' + '}', activity_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['type'] = type
      form_params['id'] = id
      form_params['timestamp'] = timestamp
      form_params['localTimestamp'] = local_timestamp
      form_params['localTimezone'] = local_timezone
      form_params['callerId'] = caller_id
      form_params['serviceUrl'] = service_url
      form_params['channelId'] = channel_id
      form_params['from'] = from
      form_params['conversation'] = conversation
      form_params['recipient'] = recipient
      form_params['textFormat'] = text_format
      form_params['attachmentLayout'] = attachment_layout
      form_params['membersAdded'] = @api_client.build_collection_param(members_added, :multi)
      form_params['membersRemoved'] = @api_client.build_collection_param(members_removed, :multi)
      form_params['reactionsAdded'] = @api_client.build_collection_param(reactions_added, :multi)
      form_params['reactionsRemoved'] = @api_client.build_collection_param(reactions_removed, :multi)
      form_params['topicName'] = topic_name
      form_params['historyDisclosed'] = history_disclosed
      form_params['locale'] = locale
      form_params['text'] = text
      form_params['speak'] = speak
      form_params['inputHint'] = input_hint
      form_params['summary'] = summary
      form_params['suggestedActions'] = suggested_actions
      form_params['attachments'] = @api_client.build_collection_param(attachments, :multi)
      form_params['entities'] = @api_client.build_collection_param(entities, :multi)
      form_params['channelData'] = channel_data
      form_params['action'] = action
      form_params['replyToId'] = reply_to_id
      form_params['label'] = label
      form_params['valueType'] = value_type
      form_params['value'] = value
      form_params['name'] = name
      form_params['relatesTo'] = relates_to
      form_params['code'] = code
      form_params['expiration'] = expiration
      form_params['importance'] = importance
      form_params['deliveryMode'] = delivery_mode
      form_params['listenFor'] = @api_client.build_collection_param(listen_for, :multi)
      form_params['textHighlights'] = @api_client.build_collection_param(text_highlights, :multi)
      form_params['semanticAction'] = semantic_action

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ResourceResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#conversations_update_activity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # UpdateActivity
    # Edit an existing activity.    Some channels allow you to edit an existing activity to reflect the new state of a bot conversation.    For example, you can remove buttons after someone has clicked \"Approve\" button.
    # @param type 
    # @param id 
    # @param timestamp 
    # @param local_timestamp 
    # @param local_timezone 
    # @param caller_id 
    # @param service_url 
    # @param channel_id 
    # @param from 
    # @param conversation 
    # @param recipient 
    # @param text_format 
    # @param attachment_layout 
    # @param members_added 
    # @param members_removed 
    # @param reactions_added 
    # @param reactions_removed 
    # @param topic_name 
    # @param history_disclosed 
    # @param locale 
    # @param text 
    # @param speak 
    # @param input_hint 
    # @param summary 
    # @param suggested_actions 
    # @param attachments 
    # @param entities 
    # @param channel_data 
    # @param action 
    # @param reply_to_id 
    # @param label 
    # @param value_type 
    # @param value 
    # @param name 
    # @param relates_to 
    # @param code 
    # @param expiration 
    # @param importance 
    # @param delivery_mode 
    # @param listen_for 
    # @param text_highlights 
    # @param semantic_action 
    # @param conversation_id Conversation ID
    # @param activity_id activityId to update
    # @param [Hash] opts the optional parameters
    # @return [ResourceResponse]
    def conversations_update_activity(type, id, timestamp, local_timestamp, local_timezone, caller_id, service_url, channel_id, from, conversation, recipient, text_format, attachment_layout, members_added, members_removed, reactions_added, reactions_removed, topic_name, history_disclosed, locale, text, speak, input_hint, summary, suggested_actions, attachments, entities, channel_data, action, reply_to_id, label, value_type, value, name, relates_to, code, expiration, importance, delivery_mode, listen_for, text_highlights, semantic_action, conversation_id, activity_id, opts = {})
      data, _status_code, _headers = conversations_update_activity_with_http_info(type, id, timestamp, local_timestamp, local_timezone, caller_id, service_url, channel_id, from, conversation, recipient, text_format, attachment_layout, members_added, members_removed, reactions_added, reactions_removed, topic_name, history_disclosed, locale, text, speak, input_hint, summary, suggested_actions, attachments, entities, channel_data, action, reply_to_id, label, value_type, value, name, relates_to, code, expiration, importance, delivery_mode, listen_for, text_highlights, semantic_action, conversation_id, activity_id, opts)
      data
    end

    # UpdateActivity
    # Edit an existing activity.    Some channels allow you to edit an existing activity to reflect the new state of a bot conversation.    For example, you can remove buttons after someone has clicked \&quot;Approve\&quot; button.
    # @param type 
    # @param id 
    # @param timestamp 
    # @param local_timestamp 
    # @param local_timezone 
    # @param caller_id 
    # @param service_url 
    # @param channel_id 
    # @param from 
    # @param conversation 
    # @param recipient 
    # @param text_format 
    # @param attachment_layout 
    # @param members_added 
    # @param members_removed 
    # @param reactions_added 
    # @param reactions_removed 
    # @param topic_name 
    # @param history_disclosed 
    # @param locale 
    # @param text 
    # @param speak 
    # @param input_hint 
    # @param summary 
    # @param suggested_actions 
    # @param attachments 
    # @param entities 
    # @param channel_data 
    # @param action 
    # @param reply_to_id 
    # @param label 
    # @param value_type 
    # @param value 
    # @param name 
    # @param relates_to 
    # @param code 
    # @param expiration 
    # @param importance 
    # @param delivery_mode 
    # @param listen_for 
    # @param text_highlights 
    # @param semantic_action 
    # @param conversation_id Conversation ID
    # @param activity_id activityId to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceResponse, Integer, Hash)>] ResourceResponse data, response status code and response headers
    def conversations_update_activity_with_http_info(type, id, timestamp, local_timestamp, local_timezone, caller_id, service_url, channel_id, from, conversation, recipient, text_format, attachment_layout, members_added, members_removed, reactions_added, reactions_removed, topic_name, history_disclosed, locale, text, speak, input_hint, summary, suggested_actions, attachments, entities, channel_data, action, reply_to_id, label, value_type, value, name, relates_to, code, expiration, importance, delivery_mode, listen_for, text_highlights, semantic_action, conversation_id, activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.conversations_update_activity ...'
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'timestamp' is set
      if @api_client.config.client_side_validation && timestamp.nil?
        fail ArgumentError, "Missing the required parameter 'timestamp' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'local_timestamp' is set
      if @api_client.config.client_side_validation && local_timestamp.nil?
        fail ArgumentError, "Missing the required parameter 'local_timestamp' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'local_timezone' is set
      if @api_client.config.client_side_validation && local_timezone.nil?
        fail ArgumentError, "Missing the required parameter 'local_timezone' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'caller_id' is set
      if @api_client.config.client_side_validation && caller_id.nil?
        fail ArgumentError, "Missing the required parameter 'caller_id' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'service_url' is set
      if @api_client.config.client_side_validation && service_url.nil?
        fail ArgumentError, "Missing the required parameter 'service_url' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'from' is set
      if @api_client.config.client_side_validation && from.nil?
        fail ArgumentError, "Missing the required parameter 'from' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'conversation' is set
      if @api_client.config.client_side_validation && conversation.nil?
        fail ArgumentError, "Missing the required parameter 'conversation' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'recipient' is set
      if @api_client.config.client_side_validation && recipient.nil?
        fail ArgumentError, "Missing the required parameter 'recipient' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'text_format' is set
      if @api_client.config.client_side_validation && text_format.nil?
        fail ArgumentError, "Missing the required parameter 'text_format' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'attachment_layout' is set
      if @api_client.config.client_side_validation && attachment_layout.nil?
        fail ArgumentError, "Missing the required parameter 'attachment_layout' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'members_added' is set
      if @api_client.config.client_side_validation && members_added.nil?
        fail ArgumentError, "Missing the required parameter 'members_added' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'members_removed' is set
      if @api_client.config.client_side_validation && members_removed.nil?
        fail ArgumentError, "Missing the required parameter 'members_removed' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'reactions_added' is set
      if @api_client.config.client_side_validation && reactions_added.nil?
        fail ArgumentError, "Missing the required parameter 'reactions_added' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'reactions_removed' is set
      if @api_client.config.client_side_validation && reactions_removed.nil?
        fail ArgumentError, "Missing the required parameter 'reactions_removed' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'topic_name' is set
      if @api_client.config.client_side_validation && topic_name.nil?
        fail ArgumentError, "Missing the required parameter 'topic_name' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'history_disclosed' is set
      if @api_client.config.client_side_validation && history_disclosed.nil?
        fail ArgumentError, "Missing the required parameter 'history_disclosed' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'locale' is set
      if @api_client.config.client_side_validation && locale.nil?
        fail ArgumentError, "Missing the required parameter 'locale' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'speak' is set
      if @api_client.config.client_side_validation && speak.nil?
        fail ArgumentError, "Missing the required parameter 'speak' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'input_hint' is set
      if @api_client.config.client_side_validation && input_hint.nil?
        fail ArgumentError, "Missing the required parameter 'input_hint' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'summary' is set
      if @api_client.config.client_side_validation && summary.nil?
        fail ArgumentError, "Missing the required parameter 'summary' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'suggested_actions' is set
      if @api_client.config.client_side_validation && suggested_actions.nil?
        fail ArgumentError, "Missing the required parameter 'suggested_actions' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'attachments' is set
      if @api_client.config.client_side_validation && attachments.nil?
        fail ArgumentError, "Missing the required parameter 'attachments' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'entities' is set
      if @api_client.config.client_side_validation && entities.nil?
        fail ArgumentError, "Missing the required parameter 'entities' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'channel_data' is set
      if @api_client.config.client_side_validation && channel_data.nil?
        fail ArgumentError, "Missing the required parameter 'channel_data' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'reply_to_id' is set
      if @api_client.config.client_side_validation && reply_to_id.nil?
        fail ArgumentError, "Missing the required parameter 'reply_to_id' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'label' is set
      if @api_client.config.client_side_validation && label.nil?
        fail ArgumentError, "Missing the required parameter 'label' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'value_type' is set
      if @api_client.config.client_side_validation && value_type.nil?
        fail ArgumentError, "Missing the required parameter 'value_type' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'relates_to' is set
      if @api_client.config.client_side_validation && relates_to.nil?
        fail ArgumentError, "Missing the required parameter 'relates_to' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'expiration' is set
      if @api_client.config.client_side_validation && expiration.nil?
        fail ArgumentError, "Missing the required parameter 'expiration' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'importance' is set
      if @api_client.config.client_side_validation && importance.nil?
        fail ArgumentError, "Missing the required parameter 'importance' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'delivery_mode' is set
      if @api_client.config.client_side_validation && delivery_mode.nil?
        fail ArgumentError, "Missing the required parameter 'delivery_mode' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'listen_for' is set
      if @api_client.config.client_side_validation && listen_for.nil?
        fail ArgumentError, "Missing the required parameter 'listen_for' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'text_highlights' is set
      if @api_client.config.client_side_validation && text_highlights.nil?
        fail ArgumentError, "Missing the required parameter 'text_highlights' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'semantic_action' is set
      if @api_client.config.client_side_validation && semantic_action.nil?
        fail ArgumentError, "Missing the required parameter 'semantic_action' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.conversations_update_activity"
      end
      # verify the required parameter 'activity_id' is set
      if @api_client.config.client_side_validation && activity_id.nil?
        fail ArgumentError, "Missing the required parameter 'activity_id' when calling ConversationsApi.conversations_update_activity"
      end
      # resource path
      local_var_path = '/v3/conversations/{conversationId}/activities/{activityId}'.sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'activityId' + '}', activity_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['type'] = type
      form_params['id'] = id
      form_params['timestamp'] = timestamp
      form_params['localTimestamp'] = local_timestamp
      form_params['localTimezone'] = local_timezone
      form_params['callerId'] = caller_id
      form_params['serviceUrl'] = service_url
      form_params['channelId'] = channel_id
      form_params['from'] = from
      form_params['conversation'] = conversation
      form_params['recipient'] = recipient
      form_params['textFormat'] = text_format
      form_params['attachmentLayout'] = attachment_layout
      form_params['membersAdded'] = @api_client.build_collection_param(members_added, :multi)
      form_params['membersRemoved'] = @api_client.build_collection_param(members_removed, :multi)
      form_params['reactionsAdded'] = @api_client.build_collection_param(reactions_added, :multi)
      form_params['reactionsRemoved'] = @api_client.build_collection_param(reactions_removed, :multi)
      form_params['topicName'] = topic_name
      form_params['historyDisclosed'] = history_disclosed
      form_params['locale'] = locale
      form_params['text'] = text
      form_params['speak'] = speak
      form_params['inputHint'] = input_hint
      form_params['summary'] = summary
      form_params['suggestedActions'] = suggested_actions
      form_params['attachments'] = @api_client.build_collection_param(attachments, :multi)
      form_params['entities'] = @api_client.build_collection_param(entities, :multi)
      form_params['channelData'] = channel_data
      form_params['action'] = action
      form_params['replyToId'] = reply_to_id
      form_params['label'] = label
      form_params['valueType'] = value_type
      form_params['value'] = value
      form_params['name'] = name
      form_params['relatesTo'] = relates_to
      form_params['code'] = code
      form_params['expiration'] = expiration
      form_params['importance'] = importance
      form_params['deliveryMode'] = delivery_mode
      form_params['listenFor'] = @api_client.build_collection_param(listen_for, :multi)
      form_params['textHighlights'] = @api_client.build_collection_param(text_highlights, :multi)
      form_params['semanticAction'] = semantic_action

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ResourceResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#conversations_update_activity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # UploadAttachment
    # Upload an attachment directly into a channel's blob storage.    This is useful because it allows you to store data in a compliant store when dealing with enterprises.    The response is a ResourceResponse which contains an AttachmentId which is suitable for using with the attachments API.
    # @param body Attachment data
    # @param conversation_id Conversation ID
    # @param [Hash] opts the optional parameters
    # @return [ResourceResponse]
    def conversations_upload_attachment(body, conversation_id, opts = {})
      data, _status_code, _headers = conversations_upload_attachment_with_http_info(body, conversation_id, opts)
      data
    end

    # UploadAttachment
    # Upload an attachment directly into a channel&#x27;s blob storage.    This is useful because it allows you to store data in a compliant store when dealing with enterprises.    The response is a ResourceResponse which contains an AttachmentId which is suitable for using with the attachments API.
    # @param body Attachment data
    # @param conversation_id Conversation ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceResponse, Integer, Hash)>] ResourceResponse data, response status code and response headers
    def conversations_upload_attachment_with_http_info(body, conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.conversations_upload_attachment ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.conversations_upload_attachment"
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.conversations_upload_attachment"
      end
      # resource path
      local_var_path = '/v3/conversations/{conversationId}/attachments'.sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['type'] = type
      form_params['name'] = name
      form_params['originalBase64'] = original_base64
      form_params['thumbnailBase64'] = thumbnail_base64

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ResourceResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#conversations_upload_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # UploadAttachment
    # Upload an attachment directly into a channel's blob storage.    This is useful because it allows you to store data in a compliant store when dealing with enterprises.    The response is a ResourceResponse which contains an AttachmentId which is suitable for using with the attachments API.
    # @param type 
    # @param name 
    # @param original_base64 
    # @param thumbnail_base64 
    # @param conversation_id Conversation ID
    # @param [Hash] opts the optional parameters
    # @return [ResourceResponse]
    def conversations_upload_attachment(type, name, original_base64, thumbnail_base64, conversation_id, opts = {})
      data, _status_code, _headers = conversations_upload_attachment_with_http_info(type, name, original_base64, thumbnail_base64, conversation_id, opts)
      data
    end

    # UploadAttachment
    # Upload an attachment directly into a channel&#x27;s blob storage.    This is useful because it allows you to store data in a compliant store when dealing with enterprises.    The response is a ResourceResponse which contains an AttachmentId which is suitable for using with the attachments API.
    # @param type 
    # @param name 
    # @param original_base64 
    # @param thumbnail_base64 
    # @param conversation_id Conversation ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceResponse, Integer, Hash)>] ResourceResponse data, response status code and response headers
    def conversations_upload_attachment_with_http_info(type, name, original_base64, thumbnail_base64, conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConversationsApi.conversations_upload_attachment ...'
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling ConversationsApi.conversations_upload_attachment"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ConversationsApi.conversations_upload_attachment"
      end
      # verify the required parameter 'original_base64' is set
      if @api_client.config.client_side_validation && original_base64.nil?
        fail ArgumentError, "Missing the required parameter 'original_base64' when calling ConversationsApi.conversations_upload_attachment"
      end
      # verify the required parameter 'thumbnail_base64' is set
      if @api_client.config.client_side_validation && thumbnail_base64.nil?
        fail ArgumentError, "Missing the required parameter 'thumbnail_base64' when calling ConversationsApi.conversations_upload_attachment"
      end
      # verify the required parameter 'conversation_id' is set
      if @api_client.config.client_side_validation && conversation_id.nil?
        fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.conversations_upload_attachment"
      end
      # resource path
      local_var_path = '/v3/conversations/{conversationId}/attachments'.sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['type'] = type
      form_params['name'] = name
      form_params['originalBase64'] = original_base64
      form_params['thumbnailBase64'] = thumbnail_base64

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ResourceResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#conversations_upload_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
