=begin
#Microsoft Bot Connector API - v3.0

#The Bot Connector REST API allows your bot to send and receive messages to channels configured in the  [Bot Framework Developer Portal](https://dev.botframework.com). The Connector service uses industry-standard REST  and JSON over HTTPS.    Client libraries for this REST API are available. See below for a list.    Many bots will use both the Bot Connector REST API and the associated [Bot State REST API](/en-us/restapi/state). The  Bot State REST API allows a bot to store and retrieve state associated with users and conversations.    Authentication for both the Bot Connector and Bot State REST APIs is accomplished with JWT Bearer tokens, and is  described in detail in the [Connector Authentication](/en-us/restapi/authentication) document.    # Client Libraries for the Bot Connector REST API    * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)  * [Bot Builder for Node.js](/en-us/node/builder/overview/)  * Generate your own from the [Connector API Swagger file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector.Shared/Swagger/ConnectorAPI.json)    Â© 2016 Microsoft

OpenAPI spec version: v3
Contact: botframework@microsoft.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module BotFramework
  class ActivityTypes
    MESSAGE = 'message'.freeze
    CONTACT_RELATION_UPDATE = 'contactRelationUpdate'.freeze
    CONVERSATION_UPDATE = 'conversationUpdate'.freeze
    TYPING = 'typing'.freeze
    END_OF_CONVERSATION = 'endOfConversation'.freeze
    EVENT = 'event'.freeze
    INVOKE = 'invoke'.freeze
    DELETE_USER_DATA = 'deleteUserData'.freeze
    MESSAGE_UPDATE = 'messageUpdate'.freeze
    MESSAGE_DELETE = 'messageDelete'.freeze
    INSTALLATION_UPDATE = 'installationUpdate'.freeze
    MESSAGE_REACTION = 'messageReaction'.freeze
    SUGGESTION = 'suggestion'.freeze
    TRACE = 'trace'.freeze
    HANDOFF = 'handoff'.freeze

    # Builds the enum from string
    # @param [String] The enum value in the form of the string
    # @return [String] The enum value
    def build_from_hash(value)
      constantValues = ActivityTypes.constants.select { |c| ActivityTypes::const_get(c) == value }
      raise "Invalid ENUM value #{value} for class #ActivityTypes" if constantValues.empty?
      value
    end
  end
end
