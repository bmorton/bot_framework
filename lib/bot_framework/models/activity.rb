=begin
#Microsoft Bot Connector API - v3.0

#The Bot Connector REST API allows your bot to send and receive messages to channels configured in the  [Bot Framework Developer Portal](https://dev.botframework.com). The Connector service uses industry-standard REST  and JSON over HTTPS.    Client libraries for this REST API are available. See below for a list.    Many bots will use both the Bot Connector REST API and the associated [Bot State REST API](/en-us/restapi/state). The  Bot State REST API allows a bot to store and retrieve state associated with users and conversations.    Authentication for both the Bot Connector and Bot State REST APIs is accomplished with JWT Bearer tokens, and is  described in detail in the [Connector Authentication](/en-us/restapi/authentication) document.    # Client Libraries for the Bot Connector REST API    * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)  * [Bot Builder for Node.js](/en-us/node/builder/overview/)  * Generate your own from the [Connector API Swagger file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector.Shared/Swagger/ConnectorAPI.json)    Â© 2016 Microsoft

OpenAPI spec version: v3
Contact: botframework@microsoft.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.29
=end

require 'date'

module BotFramework
  # An Activity is the basic communication type for the Bot Framework 3.0 protocol.
  class Activity
    attr_accessor :type

    # Contains an ID that uniquely identifies the activity on the channel.
    attr_accessor :id

    # Contains the date and time that the message was sent, in UTC, expressed in ISO-8601 format.
    attr_accessor :timestamp

    # Contains the local date and time of the message, expressed in ISO-8601 format.  For example, 2016-09-23T13:07:49.4714686-07:00.
    attr_accessor :local_timestamp

    # Contains the name of the local timezone of the message, expressed in IANA Time Zone database format.  For example, America/Los_Angeles.
    attr_accessor :local_timezone

    # A string containing an IRI identifying the caller of a bot. This field is not intended to be transmitted  over the wire, but is instead populated by bots and clients based on cryptographically verifiable data  that asserts the identity of the callers (e.g. tokens).
    attr_accessor :caller_id

    # Contains the URL that specifies the channel's service endpoint. Set by the channel.
    attr_accessor :service_url

    # Contains an ID that uniquely identifies the channel. Set by the channel.
    attr_accessor :channel_id

    attr_accessor :from

    attr_accessor :conversation

    attr_accessor :recipient

    attr_accessor :text_format

    attr_accessor :attachment_layout

    # The collection of members added to the conversation.
    attr_accessor :members_added

    # The collection of members removed from the conversation.
    attr_accessor :members_removed

    # The collection of reactions added to the conversation.
    attr_accessor :reactions_added

    # The collection of reactions removed from the conversation.
    attr_accessor :reactions_removed

    # The updated topic name of the conversation.
    attr_accessor :topic_name

    # Indicates whether the prior history of the channel is disclosed.
    attr_accessor :history_disclosed

    # A locale name for the contents of the text field.  The locale name is a combination of an ISO 639 two- or three-letter culture code associated with a language  and an ISO 3166 two-letter subculture code associated with a country or region.  The locale name can also correspond to a valid BCP-47 language tag.
    attr_accessor :locale

    # The text content of the message.
    attr_accessor :text

    # The text to speak.
    attr_accessor :speak

    attr_accessor :input_hint

    # The text to display if the channel cannot render cards.
    attr_accessor :summary

    attr_accessor :suggested_actions

    # Attachments
    attr_accessor :attachments

    # Represents the entities that were mentioned in the message.
    attr_accessor :entities

    # Contains channel-specific content.
    attr_accessor :channel_data

    # Indicates whether the recipient of a contactRelationUpdate was added or removed from the sender's contact list.
    attr_accessor :action

    # Contains the ID of the message to which this message is a reply.
    attr_accessor :reply_to_id

    # A descriptive label for the activity.
    attr_accessor :label

    # The type of the activity's value object.
    attr_accessor :value_type

    # A value that is associated with the activity.
    attr_accessor :value

    # The name of the operation associated with an invoke or event activity.
    attr_accessor :name

    attr_accessor :relates_to

    attr_accessor :code

    # The time at which the activity should be considered to be \"expired\" and should not be presented to the recipient.
    attr_accessor :expiration

    attr_accessor :importance

    attr_accessor :delivery_mode

    # List of phrases and references that speech and language priming systems should listen for
    attr_accessor :listen_for

    # The collection of text fragments to highlight when the activity contains a ReplyToId value.
    attr_accessor :text_highlights

    attr_accessor :semantic_action

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'type' => :'type',
        :'id' => :'id',
        :'timestamp' => :'timestamp',
        :'local_timestamp' => :'localTimestamp',
        :'local_timezone' => :'localTimezone',
        :'caller_id' => :'callerId',
        :'service_url' => :'serviceUrl',
        :'channel_id' => :'channelId',
        :'from' => :'from',
        :'conversation' => :'conversation',
        :'recipient' => :'recipient',
        :'text_format' => :'textFormat',
        :'attachment_layout' => :'attachmentLayout',
        :'members_added' => :'membersAdded',
        :'members_removed' => :'membersRemoved',
        :'reactions_added' => :'reactionsAdded',
        :'reactions_removed' => :'reactionsRemoved',
        :'topic_name' => :'topicName',
        :'history_disclosed' => :'historyDisclosed',
        :'locale' => :'locale',
        :'text' => :'text',
        :'speak' => :'speak',
        :'input_hint' => :'inputHint',
        :'summary' => :'summary',
        :'suggested_actions' => :'suggestedActions',
        :'attachments' => :'attachments',
        :'entities' => :'entities',
        :'channel_data' => :'channelData',
        :'action' => :'action',
        :'reply_to_id' => :'replyToId',
        :'label' => :'label',
        :'value_type' => :'valueType',
        :'value' => :'value',
        :'name' => :'name',
        :'relates_to' => :'relatesTo',
        :'code' => :'code',
        :'expiration' => :'expiration',
        :'importance' => :'importance',
        :'delivery_mode' => :'deliveryMode',
        :'listen_for' => :'listenFor',
        :'text_highlights' => :'textHighlights',
        :'semantic_action' => :'semanticAction'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'type' => :'Object',
        :'id' => :'Object',
        :'timestamp' => :'Object',
        :'local_timestamp' => :'Object',
        :'local_timezone' => :'Object',
        :'caller_id' => :'Object',
        :'service_url' => :'Object',
        :'channel_id' => :'Object',
        :'from' => :'Object',
        :'conversation' => :'Object',
        :'recipient' => :'Object',
        :'text_format' => :'Object',
        :'attachment_layout' => :'Object',
        :'members_added' => :'Object',
        :'members_removed' => :'Object',
        :'reactions_added' => :'Object',
        :'reactions_removed' => :'Object',
        :'topic_name' => :'Object',
        :'history_disclosed' => :'Object',
        :'locale' => :'Object',
        :'text' => :'Object',
        :'speak' => :'Object',
        :'input_hint' => :'Object',
        :'summary' => :'Object',
        :'suggested_actions' => :'Object',
        :'attachments' => :'Object',
        :'entities' => :'Object',
        :'channel_data' => :'Object',
        :'action' => :'Object',
        :'reply_to_id' => :'Object',
        :'label' => :'Object',
        :'value_type' => :'Object',
        :'value' => :'Object',
        :'name' => :'Object',
        :'relates_to' => :'Object',
        :'code' => :'Object',
        :'expiration' => :'Object',
        :'importance' => :'Object',
        :'delivery_mode' => :'Object',
        :'listen_for' => :'Object',
        :'text_highlights' => :'Object',
        :'semantic_action' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `BotFramework::Activity` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `BotFramework::Activity`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end

      if attributes.key?(:'local_timestamp')
        self.local_timestamp = attributes[:'local_timestamp']
      end

      if attributes.key?(:'local_timezone')
        self.local_timezone = attributes[:'local_timezone']
      end

      if attributes.key?(:'caller_id')
        self.caller_id = attributes[:'caller_id']
      end

      if attributes.key?(:'service_url')
        self.service_url = attributes[:'service_url']
      end

      if attributes.key?(:'channel_id')
        self.channel_id = attributes[:'channel_id']
      end

      if attributes.key?(:'from')
        self.from = attributes[:'from']
      end

      if attributes.key?(:'conversation')
        self.conversation = attributes[:'conversation']
      end

      if attributes.key?(:'recipient')
        self.recipient = attributes[:'recipient']
      end

      if attributes.key?(:'text_format')
        self.text_format = attributes[:'text_format']
      end

      if attributes.key?(:'attachment_layout')
        self.attachment_layout = attributes[:'attachment_layout']
      end

      if attributes.key?(:'members_added')
        if (value = attributes[:'members_added']).is_a?(Array)
          self.members_added = value
        end
      end

      if attributes.key?(:'members_removed')
        if (value = attributes[:'members_removed']).is_a?(Array)
          self.members_removed = value
        end
      end

      if attributes.key?(:'reactions_added')
        if (value = attributes[:'reactions_added']).is_a?(Array)
          self.reactions_added = value
        end
      end

      if attributes.key?(:'reactions_removed')
        if (value = attributes[:'reactions_removed']).is_a?(Array)
          self.reactions_removed = value
        end
      end

      if attributes.key?(:'topic_name')
        self.topic_name = attributes[:'topic_name']
      end

      if attributes.key?(:'history_disclosed')
        self.history_disclosed = attributes[:'history_disclosed']
      end

      if attributes.key?(:'locale')
        self.locale = attributes[:'locale']
      end

      if attributes.key?(:'text')
        self.text = attributes[:'text']
      end

      if attributes.key?(:'speak')
        self.speak = attributes[:'speak']
      end

      if attributes.key?(:'input_hint')
        self.input_hint = attributes[:'input_hint']
      end

      if attributes.key?(:'summary')
        self.summary = attributes[:'summary']
      end

      if attributes.key?(:'suggested_actions')
        self.suggested_actions = attributes[:'suggested_actions']
      end

      if attributes.key?(:'attachments')
        if (value = attributes[:'attachments']).is_a?(Array)
          self.attachments = value
        end
      end

      if attributes.key?(:'entities')
        if (value = attributes[:'entities']).is_a?(Array)
          self.entities = value
        end
      end

      if attributes.key?(:'channel_data')
        self.channel_data = attributes[:'channel_data']
      end

      if attributes.key?(:'action')
        self.action = attributes[:'action']
      end

      if attributes.key?(:'reply_to_id')
        self.reply_to_id = attributes[:'reply_to_id']
      end

      if attributes.key?(:'label')
        self.label = attributes[:'label']
      end

      if attributes.key?(:'value_type')
        self.value_type = attributes[:'value_type']
      end

      if attributes.key?(:'value')
        self.value = attributes[:'value']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'relates_to')
        self.relates_to = attributes[:'relates_to']
      end

      if attributes.key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.key?(:'expiration')
        self.expiration = attributes[:'expiration']
      end

      if attributes.key?(:'importance')
        self.importance = attributes[:'importance']
      end

      if attributes.key?(:'delivery_mode')
        self.delivery_mode = attributes[:'delivery_mode']
      end

      if attributes.key?(:'listen_for')
        if (value = attributes[:'listen_for']).is_a?(Array)
          self.listen_for = value
        end
      end

      if attributes.key?(:'text_highlights')
        if (value = attributes[:'text_highlights']).is_a?(Array)
          self.text_highlights = value
        end
      end

      if attributes.key?(:'semantic_action')
        self.semantic_action = attributes[:'semantic_action']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          type == o.type &&
          id == o.id &&
          timestamp == o.timestamp &&
          local_timestamp == o.local_timestamp &&
          local_timezone == o.local_timezone &&
          caller_id == o.caller_id &&
          service_url == o.service_url &&
          channel_id == o.channel_id &&
          from == o.from &&
          conversation == o.conversation &&
          recipient == o.recipient &&
          text_format == o.text_format &&
          attachment_layout == o.attachment_layout &&
          members_added == o.members_added &&
          members_removed == o.members_removed &&
          reactions_added == o.reactions_added &&
          reactions_removed == o.reactions_removed &&
          topic_name == o.topic_name &&
          history_disclosed == o.history_disclosed &&
          locale == o.locale &&
          text == o.text &&
          speak == o.speak &&
          input_hint == o.input_hint &&
          summary == o.summary &&
          suggested_actions == o.suggested_actions &&
          attachments == o.attachments &&
          entities == o.entities &&
          channel_data == o.channel_data &&
          action == o.action &&
          reply_to_id == o.reply_to_id &&
          label == o.label &&
          value_type == o.value_type &&
          value == o.value &&
          name == o.name &&
          relates_to == o.relates_to &&
          code == o.code &&
          expiration == o.expiration &&
          importance == o.importance &&
          delivery_mode == o.delivery_mode &&
          listen_for == o.listen_for &&
          text_highlights == o.text_highlights &&
          semantic_action == o.semantic_action
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [type, id, timestamp, local_timestamp, local_timezone, caller_id, service_url, channel_id, from, conversation, recipient, text_format, attachment_layout, members_added, members_removed, reactions_added, reactions_removed, topic_name, history_disclosed, locale, text, speak, input_hint, summary, suggested_actions, attachments, entities, channel_data, action, reply_to_id, label, value_type, value, name, relates_to, code, expiration, importance, delivery_mode, listen_for, text_highlights, semantic_action].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        BotFramework.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
